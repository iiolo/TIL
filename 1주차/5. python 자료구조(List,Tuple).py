#Section 04-3
#파이썬, 데이터 타입)자료형
#리스트, 튜ㅡㄹ

#리스트(순서o, 중복o, 수정o, 삭제o)
#선언
a=[]
b=list()
c=[1,2,3,4]# 보통 쓰는 방식
d=[10,100,'pen','banana', 'orange'] # 타입이 다른 데이터 같이 선언 가능
e=[10,100,['pen','banana', 'orange']] # 리스트 안 리스트 가능

# 인덱싱(0,1,2 순으로 인덱스를 매김)
print(d[3])#banana
print(d[-2])#banana
print(d[0]+d[1])#110
print(e[2][1])#2에 위치하는 리스트서부터의 1번째 그래서 출력값 banana
print(e[-1][-2])#역순으로 봤을 때-1에 위치한 리스트 ['pen','banana', 'orange']의 -2에 위치한 banana가 출력값

#슬라이싱
print(d[0:2])#[10,100]
 
#2에 위치하는 리스트의 1부터 3까지의 범위는 각 1, 2의 위치에 해당하는 [banan, orange]가 출력
print(e[2][1:3])

#연산
print(c+d)#[1,2,3,4,10,100,'pen','banana', 'orange']
print(c*3)#[1,2,3,4,1,2,3,4,1,2,3,4
print(str(c(0))+'hi')#1hi

#리스트 수정, 삭제
c[0]=77#c의 0번째 데이터를 77로 수정
print[c]#[1,2,3,4]->[77,2,3,4]

c[1:2] = [100,1000,1000]#c의 1부터 3사이에 해당하는 데이터 변경
print[c]#[77,2,3,4]->[77,100,1000,1000,3,4] 
c[1]=['a','b','c']
print(c)#[77,['a','b','c'],1000,1000,3,4] 

del c[1]#리스트c의 1 인덱스에 위치한 데이터 삭제
print(c)#[77,1000,1000,3,4]

del c[-1]
print(c)#[77,1000,1000,3]

#리스트 함수
y=[5,2,3,1,4]
print(y)
y.append(6)#끝부분에 6추가
print(y)#[5,2,3,1,4,6]

y.sort()#오름차순으로 정렬
print(y)#[1,2,3,4,5,6]

y.reverse()#반대로
print(y)#[6,5,4,3,2,1]

y.insert(2,7) #y의 2번 인덱스에 7 삽입
print(y)#[6,5,7,4,3,2,1]

y.remove(2)#2 지움
y.remove(7)#7 지움
print(y)#[6,5,4,3,1]

y.pop()#맨 마지막 데이터(원소) 꺼내고 없앰()
print(y)#[6,5,4,3]

ex=[88,77]
y.extend(ex)#[88,77]내 데이터를 y 뒤로 연장
print(y)#[6,5,4,3,88,77]

# 삭제 : del, remove, pop



#튜플(순서o, 중복o, 수정x, 삭제x)
#선언 방식
a=()
b=(1,)
c=(1,2,3,4)
del c[2]#튜플은 삭제 불가능

d=(10,100,('a','b','c'))#튜플 안에 튜플 선언 가능

#인덱싱
print(c[2])#3
print(c[3])#4
print(d[2][1])#2번 인덱스의 튜플에서 1번째는 b

#슬라이싱
print(d[2:])#d의 2부터 다나와라는 뜻으로 출력값은 (('a','b','c'),)
print(d[2][0:2])#d의 2번 튜플에서 0에서 2이하 이므로 ('a','b') 

#연산
print(c+d)#(1,2,3,4,10,100,('a','b','c'))
print(c*3)#(1,2,3,4,1,2,3,4,1,2,3,4)

#튜플 함수
z=(5,2,1,3,1)
print(z)
print(3 in z)#3이 z안에 있는지 확인 true/false
print(z.index(5))#5의 값이 있는 인덱스를 반환 그래서 1
print(z.count(1))#이 튜플에서 1 의 갯수 그래서 2개로 2
