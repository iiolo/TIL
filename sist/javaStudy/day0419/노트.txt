"서점관리"를 위하여 필요한 테이블을 만들어 봅시다.

도서(도서번호,도서이름,출판사,가격)
고객(고객번호,고객이름,주소,전화)
주문(주문번호,고객번호,도서번호,구매가격,구매일)

--------------------------------------------------------------------------------------

create table book(	
	bookid number primary key,	
	bookname varchar2(50),
	publisher varchar2(50),	
	price number);

create table customer(
	custid number primary key,
	name varchar2(50),
	address varchar2(50),
	phone varchar2(20)
);

create table orders(
	orderid number primary key,
	custid number references customer(custid),
	bookid number references book(bookid),
	saleprice number,
	orderdate date
);

--------------------------------------------------------------------------------------

insert into book values(1,'축구의 역사','굿스포츠',7000);
insert into book values(2,'축구아는 여자','나무수',13000);
insert into book values(3,'축구의 이해','대한미디어',22000);
insert into book values(4,'골프 바이블','대한미디어',35000);
insert into book values(5,'피겨 교본','굿스포츠',8000);
insert into book values(6,'역도 단계별 기술','굿스포츠',6000);
insert into book values(7,'야구의 추억','이상미디어',20000);
insert into book values(8,'야구를 부탁해','이상미디어',13000);
insert into book values(9,'올림픽 이야기','삼성당',7500);
insert into book values(10,'Olympic Chapions','Pearson',13000);

데이터를 추가 하고 그것을 데이터베이스 반영하기 위하여 
commit 합니다.
--------------------------------------------------------------
연습) 다음과 같은 고객의 정보를 추가 해 봅니다.    완성하면 "3"
1, 박지성, 영국 맨체스타, 000-5000-0001
2, 김연아, 대한민국 서울, 000-6000-0001
3, 장미란, 대한민국 강원도, 000-7000-0001
4, 추신수, 미국 클리블랜드, 000-8000-0001

insert into customer values(1, '박지성', '영국 맨체스타', '000-5000-0001');
insert into customer values(2, '김연아', '대한민국 서울', '000-6000-0001');
insert into customer values(3, '장미란', '대한민국 강원도', '000-7000-0001');
insert into customer values(4, '추신수', '미국 클리블랜드', '000-8000-0001');

--------------------------------------------------------------

연습) 고객테이블에 대한 각 컬럼에 대하여 
		컬럼포멧을 설정하고 고객의 정보를 조회 해 봅니다.
		
		완성하면 "3"

--------------------------------------------------------------

insert into customer values(5, '박세리', '대한민국 대전', null);

-------------------------------------------------------------------
CUSTID NAME       ADDRESS              PHONE
------ ---------- -------------------- ---------------
     1 박지성     영국 맨체스타        000-5000-0001
     2 김연아     대한민국 서울        000-6000-0001
     3 장미란     대한민국 강원도      000-7000-0001
     4 추신수     미국 클리블랜드      000-8000-0001
     5 박세리     대한민국 대전

BOOKID BOOKNAME             PUBLISHER     PRICE
------ -------------------- ---------- --------
     1 축구의 역사          굿스포츠      7,000
     2 축구아는 여자        나무수       13,000
     3 축구의 이해          대한미디어   22,000
     4 골프 바이블          대한미디어   35,000
     5 피겨 교본            굿스포츠      8,000
     6 역도 단계별 기술     굿스포츠      6,000
     7 야구의 추억          이상미디어   20,000
     8 야구를 부탁해        이상미디어   13,000
     9 올림픽 이야기        삼성당        7,500
    10 Olympic Chapions     Pearson      13,000

10 행이 선택되었습니다.

SQL>

-------------------------------------------------------------------
'박지성'고객에 '축구의 역사'를 6000에 구매한 정보를 orders테이블에 추가 해 봅시다.
(1번고객이 1번도서를 6000원에 구매한 정보를 orders 테이블에 추가)

주문(주문번호,고객번호,도서번호,구매가격,구매일)
insert into orders values(1,1,1,6000,'2022/04/01');

insert into orders values(2,1,3,21000,'2022/04/03');
insert into orders values(3,2,5,8000,'2022/04/03');
insert into orders values(4,3,6,6000,'2022/04/04');
insert into orders values(5,4,7,20000,'2022/04/05');
insert into orders values(6,1,2,12000,'2022/04/07');
insert into orders values(7,4,8,13000,'2022/04/07');
insert into orders values(8,3,10,12000,'2022/04/08');
insert into orders values(9,2,10,7000,'2022/04/09');
insert into orders values(10,3,8,13000,'2022/04/10');

연습) orders  테이블의 각 컬럼에 대하여 컬럼포멧을 설정하고 
			모든 주문내역을 조회하여 봅니다.
			
			완성하면 "3"	







연습) 김연아 고객의 전화번호를 검색
select phone from customer where name = '김연아';

연습) 도서의 이름과 가격를 출력
select bookname,price from book;

연습) 도서의 가격과 이름을 출력
select price, bookname from book;

연습) 고객의 이름과 주소를 출력
	select name,address
	from customer;


연습) 고객의 주소와 이름을 출력
	select address,name
	from customer;
	
------------------------------------------------------------------------
모든 도서의 도서번호, 도서명, 출판사, 가격을 출력
select bookid, bookname, publisher, price 
from book;

select * 
from book;


------------------------------------------------------------------------
book테이블에 있는 모든 출판사를 출력

select publisher
from book;


PUBLISHER
----------
굿스포츠
나무수
대한미디어
대한미디어
굿스포츠
굿스포츠
이상미디어
이상미디어
삼성당
Pearson

10 행이 선택되었습니다

중복을 제거하고 한번씩만 나타나게 하려면
	distinct키워드를 사용합니다.
	
select distinct publisher
from book;	
	

PUBLISHER
----------
굿스포츠
나무수
대한미디어
이상미디어
삼성당
Pearson

6 행이 선택되었습니다.

==> 중복이 제거되어 book테이블에 있는 출판사의 종류를 확인할 수 있어요!

------------------------------------------------------------------------

모든 도서의 정보를 출력
select *
from book;


BOOKID BOOKNAME             PUBLISHER     PRICE
------ -------------------- ---------- --------
     1 축구의 역사          굿스포츠      7,000
     2 축구아는 여자        나무수       13,000
     3 축구의 이해          대한미디어   22,000
     4 골프 바이블          대한미디어   35,000
     5 피겨 교본            굿스포츠      8,000
     6 역도 단계별 기술     굿스포츠      6,000
     7 야구의 추억          이상미디어   20,000
     8 야구를 부탁해        이상미디어   13,000
     9 올림픽 이야기        삼성당        7,500
    10 Olympic Chapions     Pearson      13,000

10 행이 선택되었습니다.
------------------------------------------------------------------------

가격이 20000원 미만인 도서의 정보를 출력
select * 
from book
where price < 20000;



BOOKID BOOKNAME             PUBLISHER     PRICE
------ -------------------- ---------- --------
     1 축구의 역사          굿스포츠      7,000
     2 축구아는 여자        나무수       13,000
     5 피겨 교본            굿스포츠      8,000
     6 역도 단계별 기술     굿스포츠      6,000
     8 야구를 부탁해        이상미디어   13,000
     9 올림픽 이야기        삼성당        7,500
    10 Olympic Chapions     Pearson      13,000

7 행이 선택되었습니다.

-----------------------------------------------------------------------

가격이 10000원과 20000원 사이의 모든 도서를 출력

select *
from book
where price >= 10000 and price <= 20000;

------ -------------------- ---------- --------
     2 축구아는 여자        나무수       13,000
     7 야구의 추억          이상미디어   20,000
     8 야구를 부탁해        이상미디어   13,000
    10 Olympic Chapions     Pearson      13,000
    
    
-----------------------------------------------------------------------

select *
from book
where price between 10000 and 20000;


BOOKID BOOKNAME             PUBLISHER     PRICE
------ -------------------- ---------- --------
     2 축구아는 여자        나무수       13,000
     7 야구의 추억          이상미디어   20,000
     8 야구를 부탁해        이상미디어   13,000
    10 Olympic Chapions     Pearson      13,000

-----------------------------------------------------------------------

출판사가 '굿스포츠' 혹은 '대한미디어'인 도서의 정보를 출력

select *
from book
where publisher in ('굿스포츠','대한미디어');

select * 
from book
where publisher ='굿스포츠' or publisher = '대한미디어';


-----------------------------------------------------------------------
출판사가 '굿스포츠' 혹은 '대한미디어'가 아닌 도서의 정보를 출력

select *
from book
where publisher not in ('굿스포츠', '대한미디어');


select *
from book
where publisher <> '굿스포츠' and publisher <> '대한미디어';

-----------------------------------------------------------------------

like	연산자
		문자열의 패턴을 검색하고자 할 때에 사용하는 연산자 입니다.
		
		%	아무글자
		_	모르는 한글자
		
		
축구의 역사를 출간한 출판사를 검색
select bookname, publisher
from book
where bookname = '축구의 역사';

select bookname, publisher
from book
where bookname like '축구의 역사';

-----------------------------------------------------------------------			

도서이름이 '축구'가 포함된 모든 도서명과 출판사명을 검색

select bookname,publisher
from book
where bookname like '%축구%';

BOOKNAME             PUBLISHER
-------------------- ----------
축구의 역사          굿스포츠
축구아는 여자        나무수
축구의 이해          대한미디어

-----------------------------------------------------------------------	

도서이름의 두번째 글자구 '구'인 모든도서명과 출판사명을 출력

select bookname, publisher
from book
where bookname like '_구%';


BOOKNAME             PUBLISHER
-------------------- ----------
축구의 역사          굿스포츠
축구아는 여자        나무수
축구의 이해          대한미디어
야구의 추억          이상미디어
야구를 부탁해        이상미디어


-----------------------------------------------------------------------	
복합조건
	조건식에 2개이상일때에
		and
		or		를 사용합니다.
		
		
축구와 관련한 도서중에 가격이 20000원 이상인 도서의 정보를 출력
select * 
from book
where bookname like '%축구%' and price >= 20000;



'굿스포츠' 혹은 '대한미디어'에서 출간하는 모든 도서의 정보를 출력		

select * 
from book
where publisher = '굿스포츠' or publisher = '대한미디어';


select *
from book
where publisher in ('굿스포츠', '대한미디어');


-------------------------------------------------------------------------------------------------

order by 
		==> 특정 칼럼을 기준으로 자료를 정렬하여 검색하고자 할 때에 사용합니다.
		
		order by 컬럼이름 [asc,desc]
				asc	: 오름차순(기본,생략가능)
				desc : 내림차순
		


------------------------------------------------------------------------------------------------------

모든 도서의 정보를 이름순으로 정렬

select *
from book
order by bookname;


------------------------------------------------------------------------------------------------------

모든도서의 정보를 가격이 높은순으로 정렬하여 출력합니다. 단, 가격이 동일때에는 도서명순으로 정렬합니다.

select * 
from book
order by price desc, bookname;


연습) 모든 도서의 정보를 출판사순으로 출력합니다.
			단, 출판사가 동일할 때에는 가격이 높은순으로 출력합니다.
			
			완성하면 "3"

select * 
from book
order by publisher, price desc; 


연습) '굿스포츠'나, '대한미디어'나, '이상미디어'에서 출판하는 도서중에 
		 가격이 7000원 이상인 도서의 정보를 출력하시오.
		 단, 가격이 높은순으로 출력하되 가격이 동일할 때에는 도서명순으로 출력합니다.
		 
select * 
from book
where publisher in ('굿스포츠', '대한미디어', '이상미디어') and
price >= 7000
order by price desc, bookname;
		 

------------------------------------------------------------------------------------------------------

집계함수
		컬럼별로 총합,		평균,	최대값,	최소값,	개수를 파악하기 위한 함수들을 말합니다.
				sum		avg		max		min		count
		


모든 주문금액을 출력
select saleprice from orders;
		
SALEPRICE
---------
    6,000
   21,000
    8,000
    6,000
   20,000
   12,000
   13,000
   12,000
    7,000
   13,000

10 행이 선택되었습니다.

------------------------------------------------------------------------------------------------------

모든 주문금액의 총합을 출력

select saleprice from orders;			<--------  레코드의 수 만큼 
select sum(saleprice) from orders;		<--------  한건		


SUM(SALEPRICE)
--------------
        118000

---------------------------------------------------------------------------------------------------------

연습) 1번 고객의 총주문금액을 출력
select sum(saleprice) from orders where custid=1;


연습) 이상미디어에서 출간하는 도서의 수를 출력
select count(bookname) from book where publisher = '이상미디어';


연습) 이상미디어에서 출간하는 도서의 최고 금액을 출력
select max(price) from book where publisher = '이상미디어';


연습) 이상미디어에서 출간하는 도서의 평균금액을 출력
select avg(price) from book where publisher = '이상미디어';

select avg(price) as 평균금액 from book where publisher = '이상미디어';

select avg(price)  평균금액 from book where publisher = '이상미디어';

---------------------------------------------------------------------------------------------------------

2번 김연아 고객이 주문한 도서의 총 판매액을 출력

select sum(saleprice) from orders where custid=2;


고객이 주문한 도서의 총판매액, 평균값, 최저가, 최고가를 출력
select sum(saleprice) Total, 
		avg(saleprice) Average, 
		min(saleprice) Minimum, 
		max(saleprice) Maximum from orders;

--------------------------------------------------------------------------------

count 함수
	개수를 파악하는 함수입니다.
	
	count(컬럼이름)  	<--- 그 컬럼의 값이 null인 아닌 개수를 알려주는 함수
	count(*)		<--- 모든 레코드의 수를 알려주는 함수
	
	
 모든 도서의 판매건수를 출력	
 	
 select count(*) from orders;	
 select count(orderid) from orders;

--------------------------------------------------------------------------------

모든 고객의 수를 출력

select count(*) from customer;
select count(custid) from customer;
select count(phone) from customer;

--------------------------------------------------------------------------
연습) 1번고객이 주문한 총주문건수와 총주문금액을 출력
	완성하면 "1"
	
	select count(*), sum(saleprice) from orders where custid = 1;

--------------------------------------------------------------------------
연습) 주문한 총주문건수와 총주문금액을 출력
	select count(*),sum(saleprice) from orders;

	select custid, count(*),sum(saleprice) from orders;
	select custid, count(*),sum(saleprice) from orders
       *
	1행에 오류:
	ORA-00937: 단일 그룹의 그룹 함수가 아닙니다
		<---- 집계함수의 결과는 한 건 이기 때문 다른 컬럼을 함께 출력할 수 없어요!!!
		
--------------------------------------------------------------------------

연습) 고객아이디별로 
			총주문건수와 총주문금액을 출력
			
			===> 한건이 아니라
			===> 고객아이디 수 만큼 출력
			===> 집계함수와 함께 group by 절을 사용.
			
	select custid, count(*), sum(saleprice) from orders group by custid;		
	
	===> 집계함수를 사용할 때에 
			group by 절에 나타난 칼럼만이 
			select 절에 올 수 있어요!
		
--------------------------------------------------------------------------

연습) 출판사별로 
			출간하는 도서의 수, 평균도서가격, 최저도서가격, 최고도서가격을 출력하시오.
			단, 도서의 수가 높은 순으로 출력합니다. 
			
			select  publisher,  count(*), avg(price), min(price), max(price)
			from book
			group by publisher
			order by count(*) desc;

------------------------------------------------------------------------------		
연습)  '굿스포츠'나 '이상미디어', '대한미디어'에서 출간하는 
도서를 고객아이디별로 구매한 건수를 출력하시오.

- 구매한 정보	==> orders
- 출판사 정보  ==> book


select custid, count(*) from orders 
where bookid in (select bookid from 
	book where publisher in ('굿스포츠', '이상미디어', '대한미디어'))
	group by custid;






book테이블로 부터 '굿스포츠'나 '이상미디어', '대한미디어'에서 
출간하는 도서번호를 검색

select bookid from 
	book where publisher in ('굿스포츠', '이상미디어', '대한미디어');

BOOKID
------
     1
     3
     4
     5
     6
     7
     8

------------------------------------------------------------------------------	
연습) 8000원이상 구매한 정보에 대하여 
		고객아이디별로 총구매 건수를 출력하시오.
		
select custid, count(*) 
	from orders 
	where saleprice >= 8000
	group by custid;
	
		
CUSTID   COUNT(*)
------ ----------
     1          2
     2          1
     4          2
     3          2		 

		
------------------------------------------------------------------------------
having	
	
		==> group by 절에 나타난 결과에 대하여 조건식을 표현하고자 할 때에 사용.
		

연습) 8000원이상인 구매에 대하여 
		고객아이디 별로 총구매건수를 출력하시오.
		단, 총구매건수가 2건이상인 것만 출력하시오.
			
select custid, count(*) 
	from orders 
	where saleprice >= 8000
	group by custid
	having count(*) >= 2;		
	

연습) '굿스포츠'나 '이상미디어', '대한미디어'에서 
출간하는 출판사별 도서의 수, 평균도서가격을 출력하시오.
단, 평균도서가격이 8000원이상인 도서만 출력합니다.
또,평균가격이 높은순으로 출력합니다.

select publisher, count(*), avg(price)
from book
where publisher in ('굿스포츠', '이상미디어', '대한미디어')
group by publisher
having avg(price) >= 8000
order by avg(price) desc;

-----------------------------------------------------------------------------

1 마당서점의 고객이 요구하는 다음 질문에 대해 SQL 문을 작성하시오.
  (1) 도서번호가 1인 도서의 이름
	select bookname from book where bookid = 1;  
  
  (2) 가격이 20,000원 이상인 도서의 이름
  	select bookname from book where price >= 20000;
  
  (3) 박지성의 총 구매액(박지성의 고객번호는 1번으로 놓고 작성)
  	select sum(saleprice) from orders where custid = 1;
    
  (4) 박지성이 구매한 도서의 수(박지성의 고객번호는 1번으로 놓고 작성)
	select count(*) from orders where custid = 1;

----------------------------------------------------------------------
2 마당서점의 운영자와 경영자가 요구하는 다음 질문에 대해 SQL 문을 작성하시오.
  (1) 마당서점 도서의 총 개수
  select count(*) from book;
  
  (2) 마당서점에 도서를 출고하는 출판사의 총 개수
  select count(distinct publisher) from book;
  
  (3) 모든 고객의 이름, 주소
  	select name, address from customer;
  
  (4) 2022년 4월 4일~4월 7일 사이에 주문받은 도서의 주문번호
  	select orderid from orders 
  	where orderdate between '2022/04/04' and '2022/04/07';
  	
  	select orderid from orders 
  	where orderdate >= '2022/04/04' and orderdate <= '2022/04/07';
  
  (5) 2022년 4월 4일~7월 7일 사이에 주문받은 도서를 제외한 도서의 주문번호
  	select orderid from orders
  	where orderdate not between '2022/04/04' and '2022/04/07';
  
  	select orderid from orders 
  	where orderdate < '2022/04/04' or orderdate > '2022/04/07'; 
  
  (6) 성이 ‘김’ 씨인 고객의 이름과 주소
  	select name, address from customer 
  	where name like '김%';
  
    
  (7) 성이 ‘김’ 씨이고 이름이 ‘아’로 끝나는 고객의 이름과 주소
		select name, address from customer 
		where name like '김%아';


	insert into customer values(6, '김철수', '대한민국 인천', '000-9000-0001');
	insert into customer values(7, '김시아', '대한민국 부산', '000-7777-0001');
	
------------------------------------------------------------------------------

고객번호를 입력받아 
		그 고객이 주문한 
		주문번호, 고객번호, 도서번호, 구매금액, 구매일을 출력하는 프로그램을 작성
		

1번 고객의 주문내역을 출력
select * from orders where custid = 1;		
		
------------------------------------------------------------------------------			

데이터베이스 연동프로그램 만들때에는 
	VO(Value Object)			==> 데이터베이스 테이블을 객체로 표현하기 위한 클래스를 말합니다.
	DAO(DataBase Access Obejct)	==> 데이터베이스에 접근하여	검색,추가,수정,삭제
											의 명령을 수행하는 클래스를 말합니다.
											
											 
				





























































